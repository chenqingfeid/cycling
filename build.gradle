import java.text.SimpleDateFormat
import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://maven.fabric.io/repo' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
        classpath 'io.fabric.tools:gradle:1.21.6'
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url "https://jitpack.io" }
    }
}

apply plugin: 'com.android.application'


def buildTime() {
    def df = new SimpleDateFormat("yyyyMMddHHmm")
    df.setTimeZone(TimeZone.getDefault())
    return df.format(new Date())
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])


    compile project(':android-gpuimage')
    compile project(':com.beastbikes.framework.android')
    compile project(':com.beastbikes.framework.business')
    compile project(':com.beastbikes.framework.persistence')
    compile project(':com.beastbikes.framework.persistence.android')
    compile project(':com.beastbikes.framework.persistence.android.ormlite')
    compile project(':com.beastbikes.framework.ui.android')
    compile project(':io.rongcloud.imkit.android')
    compile project(':com.beastbikes.android.sphere')
    compile project(':com.beastbikes.android.sharesdklibrary')
    compile('com.mapbox.mapboxsdk:mapbox-android-sdk:4.2.0-beta.3@aar') {
        transitive = true
    }
    compile project(':com.beastbikes.android.ble.protocol.parser')
    compile project(':com.beastbikes.android.leancloud')
    compile project(':com.beastbikes.android.jpush')
    compile('com.twitter.sdk.android:twitter:1.13.1@aar') {
        transitive = true;
    }
    compile 'com.tencent.bugly:crashreport:2.1'
    compile 'com.android.support:design:24.1.1'
    compile 'com.wdullaer:materialdatetimepicker:2.1.1'
    compile 'com.googlecode.libphonenumber:libphonenumber:7.2.3'
    compile 'com.facebook.android:facebook-android-sdk:4.14.0'
    compile 'com.qiniu:qiniu-android-sdk:7.2.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.google.android.gms:play-services-maps:9.2.1'
    compile 'com.google.android.gms:play-services-places:9.2.1'
    compile 'com.google.android.gms:play-services-location:9.2.1'

    compile 'io.reactivex:rxjava:1.1.6'
    compile 'io.reactivex:rxjava-math:1.0.0'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.0'
    compile 'com.fasterxml.jackson.core:jackson-core:2.8.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.0'

    // Ping++ Android在线集成
    compile 'com.pingxx:pingpp-core:2.1.5' //必须添加
    compile 'com.pingxx:pingpp-alipay:2.1.5' //使用支付宝时添加
    compile 'com.pingxx:pingpp-wxpay:2.1.5' //使用微信支付时添加

    compile 'com.github.PhilJay:MPAndroidChart:v3.0.0-beta1'
    compile 'com.facebook.stetho:stetho:1.4.1'

}

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.0'

    defaultConfig {
        applicationId "${SPEEDX_APPLICATION_ID}"
        minSdkVersion SPEEDX_MIN_SDK_VERSION.toInteger()
        targetSdkVersion SPEEDX_TARGET_SDK_VERSION.toInteger()

        // Enabling multidex support.
        multiDexEnabled true
        ndk {
            //设置bugly支持的SO库架构
            abiFilters 'armeabi', 'armeabi-v7a' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

    }

    dexOptions {//resolve build oom
        javaMaxHeapSize "4g"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    signingConfigs {
        releaseConfig {
            keyAlias "${SPEEDX_SIGNING_KEY_ALIAS}"
            keyPassword "${SPEEDX_SIGNING_KEY_PASSWORD}"
            storePassword "${SPEEDX_SIGNING_STORE_PASSWORD}"
            storeFile file('keystore/beast-release.keystore')
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.releaseConfig
        }
        release {
            signingConfig signingConfigs.releaseConfig
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
        }
    }

    lintOptions {
        abortOnError false
    }

    android.applicationVariants.all { variant ->
        def manifestFile = file("AndroidManifest.xml")
        def pattern = Pattern.compile("versionName=\"(.+)\"")
        def manifestText = manifestFile.getText()
        def matcher = pattern.matcher(manifestText)
        matcher.find()
        def versionName = matcher.group(1)
        pattern = Pattern.compile("versionCode=\"(.+)\"")
        matcher = pattern.matcher(manifestText)
        matcher.find()
        def versionCode = matcher.group(1)

        if (variant.buildType.zipAlignEnabled) {
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {

                    def fileName = applicationId + "-v" + versionName + ".apk"

                    if (variant.name.equals("release")) {
                        fileName = applicationId + "-v" + versionName + ".apk"
                    }
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        } else {
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def fileName = applicationId + "-v" + versionName + "-" + "unaligned.apk"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }

    }
}
